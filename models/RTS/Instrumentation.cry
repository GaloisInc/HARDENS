module RTS::Instrumentation where

import RTS::Utils

/* Behavioral model of the RTS instrumentation unit.

   The transitions of the state machine are the Set/Toggle events, plus sampling the sensors.
*/

type Input = [2][32]

type NChannels = 3
type Channel = [lg2 NChannels]
T,P,S : Channel
T = 0 // Temperature
P = 1 // Pressure
S = 2 // Saturation

type NModes = 3
type Mode = [width NModes]
// Type-level Mode values
Bypass,Operate,Manual: Mode
Bypass = 0 // Do not generate a "trip"
Operate = 1 // generate "trip" on setpoint violation
Manual = 2 // Force "trip" generation

type Instrumentation =
  { setpoints: [NChannels][32]
  , reading: [NChannels][32]
  , mode: [NChannels]Mode
  , sensor_trip: [NChannels]
  , maintenance: Bit
  }

Initial: Instrumentation
Initial =
  { setpoints   = zero
  , reading     = zero
  , mode        = zero
  , sensor_trip = zero
  , maintenance = ~zero
  }

Get_Reading: Instrumentation -> [NChannels][32]
Get_Reading instr = instr.reading

In_Maintenance: Instrumentation -> Bit
In_Maintenance instr = instr.maintenance

Set_Maintenance: Bit -> Instrumentation -> Instrumentation
Set_Maintenance on instr = { instr | maintenance = on }

Set_Mode: Channel -> Mode -> Instrumentation -> Instrumentation
Set_Mode ch mode i =
  if In_Maintenance i && (mode <= 2) then
    {i | mode = update i.mode ch mode}
  else
    i

In_Mode: Channel -> Mode -> Instrumentation -> Bit
In_Mode ch mode instr = (instr.mode @ ch) == mode

Get_Setpoint: Channel -> Instrumentation -> [32]
Get_Setpoint ch instr = instr.setpoints @ ch

Set_Setpoint: Channel -> [32] -> Instrumentation -> Instrumentation
Set_Setpoint ch val instr = { instr | setpoints = update instr.setpoints ch val }

Get_Tripped: Instrumentation -> [NChannels]
Get_Tripped instr = [Is_Tripped T instr, Is_Tripped P instr, Is_Tripped S instr]

Is_Tripped: Channel -> Instrumentation -> Bit
Is_Tripped ch instr = In_Mode ch Manual instr
                   || (In_Mode ch Operate instr && (instr.sensor_trip @ ch))

Is_Ch_Tripped : Mode -> Bit -> Bit
Is_Ch_Tripped mode sensor_tripped =
  // Constants should be replaced, but this causes problems for crymp
  // 2 = Manual, 1 = Operate
  (mode == 2) || ((mode == 1) && sensor_tripped)

Saturation : [32] -> [32] -> [32]
Saturation t p = if p == 0 then 0 else (t / p)

Step_Trip_Signals:
  Input ->
  Instrumentation ->
  Instrumentation
Step_Trip_Signals sensors state =
  { state | reading = vals
          , sensor_trip = Generate_Sensor_Trips vals state.setpoints }
  where
    vals: [3][32]
    // 0 and 1 should be T and P, but this causes problems for crymp
    vals = [ sensors @ 0
           , sensors @ 1
           , Saturation (sensors @ 0) (sensors @ 1)
           ]

Generate_Sensor_Trips : [NChannels][32] -> [NChannels][32] -> [NChannels]
Generate_Sensor_Trips vals setpoints =
  [ trp ch | ch <- [0..NChannels-1] : [3][2] ]
  where
    // 2 should be S, but this causes problems for crymp
    trp ch = if ch == 2 then v < sp else sp < v
               where v  = vals @ ch
                     sp = setpoints @ ch

private
  /** @requirements
        INSTRUMENTATION_RESET
  */
  property instrumentation_reset =
    In_Maintenance Initial
    /\ In_Mode P Bypass Initial
    /\ In_Mode T Bypass Initial
    /\ In_Mode S Bypass Initial

  /** @requirements
        INSTRUMENTATION_TRIP_PRESSURE
  */
  property instrumentation_trip_pressure (inp: Input) (instr: Instrumentation) =
       In_Mode P Manual instr
    \/ (In_Mode P Operate instr /\ inp @ P > Get_Setpoint P instr')
    /* ------------------------------------------------------------------- */ ==
    (Is_Tripped P instr')
      where instr' = Step_Trip_Signals inp instr

  /** @requirements
        INSTRUMENTATION_TRIP_TEMPERATURE
  */
  property instrumentation_trip_temperature (inp: Input) (instr: Instrumentation) =
          In_Mode T Manual instr
     \/  (In_Mode T Operate instr /\ inp @ T > Get_Setpoint T instr')
    /* ------------------------------------------------------------------- */ ==
    (Is_Tripped T instr')
      where instr' = Step_Trip_Signals inp instr

  /** @requirements
        INSTRUMENTATION_TRIP_SATURATION
  */
  property instrumentation_trip_saturation (inp: Input) (instr: Instrumentation) =
       In_Mode S Manual instr
       \/ (In_Mode S Operate instr /\ Saturation (inp @ T) (inp @ P) < Get_Setpoint S instr')
    /* ------------------------------------------------------------------- */ ==
    (Is_Tripped S instr')
      where instr' = Step_Trip_Signals inp instr

  /** @requirements
        INSTRUMENTATION_SET_MANUAL_TRIP_TEMPERATURE
        INSTRUMENTATION_SET_MANUAL_TRIP_PRESSURE
        INSTRUMENTATION_SET_MANUAL_TRIP_SATURATION
  */
  property instrumentation_set_manual_trip (instr: Instrumentation) =
    In_Maintenance instr ==> (
         (Is_Tripped T trippedT \/ ~ (instr.sensor_trip @ T))
      /\ (Is_Tripped P trippedP \/ ~ (instr.sensor_trip @ P))
      /\ (Is_Tripped S trippedS \/ ~ (instr.sensor_trip @ S))
    )
    where
      trippedT = Set_Mode T Manual instr
      trippedP = Set_Mode P Manual instr
      trippedS = Set_Mode S Manual instr

  /** @requirements
         INSTRUMENTATION_SET_SETPOINT_TEMPERATURE
         INSTRUMENTATION_SET_SETPOINT_PRESSURE
         INSTRUMENTATION_SET_SETPOINT_SATURATION
  */
  property get_set_setpoint_correct (instr: Instrumentation) (val: [32]) =
       Get_Setpoint T (Set_Setpoint T val instr) == val
    /\ Get_Setpoint P (Set_Setpoint P val instr) == val
    /\ Get_Setpoint S (Set_Setpoint S val instr) == val

  /** @requirements
         INSTRUMENTATION_SET_BYPASS_TEMPERATURE
         INSTRUMENTATION_SET_BYPASS_PRESSURE
         INSTRUMENTATION_SET_BYPASS_SATURATION
  */
  property set_bypass_correct (instr: Instrumentation) =
       In_Maintenance instr ==> (
            ~ Is_Tripped T (Set_Mode T Bypass instr)
         /\ ~ Is_Tripped P (Set_Mode P Bypass instr)
         /\ ~ Is_Tripped S (Set_Mode S Bypass instr)
       )

  property step_state_const (inp: Input) (instr: Instrumentation) =
         instr.mode == instr'.mode
      /\ instr.setpoints == instr'.setpoints
      /\ instr.maintenance == instr'.maintenance
      where instr' = Step_Trip_Signals inp instr
