// HARDENS Reactor Trip System (RTS) Actuation Unit
// A formal model of RTS Actuation Unit behavior written in the
// Cryptol DSL.
//
// @author Alex Bakst <abakst@galois.com>
// @created November, 2021
// @refines HARDENS.sysml
// @refines RTS.lando
// @refines RTS_Requirements.json

module RTS::ActuationUnit where

import RTS::Utils
import RTS::InstrumentationUnit

type Input            = [3][4]TripPort
type ActuationPort    = Bit
type ActuationUnit    = { output: [2]ActuationPort }
type CoincidenceLogic = [4]TripPort -> Bit
type OrLogic          = [2] -> Bit

TripInput: [3][4]TripPort -> ActuationUnit -> ActuationUnit
TripInput trips actuationUnit =
  { output = [ d0, d1 ] }
  where
    d0 = Actuate_D0 trips (actuationUnit.output @ 0)
    d1 = Actuate_D1 trips (actuationUnit.output @ 1)

Actuate_D0: Input -> Bit -> Bit
Actuate_D0 trips old = d0 || old
  where
    d0 = TempPressureTripOut [TemperatureLogic temperatureTrips,
                              PressureLogic pressureTrips]
    temperatureTrips = trips @ (0:[2])
    pressureTrips = trips @ (1:[2])

Actuate_D1: Input -> Bit -> Bit
Actuate_D1 trips old = d1 || old
  where
    d1 = SaturationLogic saturationTrips
    saturationTrips = trips @ (2:[2])

TemperatureLogic: [4]TripPort -> Bit
TemperatureLogic ts = Coincidence_2_4 ts

PressureLogic: [4]TripPort -> Bit
PressureLogic ts = Coincidence_2_4 ts

SaturationLogic: [4]TripPort -> Bit
SaturationLogic ts = Coincidence_2_4 ts

TempPressureTripOut: [2] -> Bit
TempPressureTripOut ts = (ts @ (0:[1])) || (ts @ (1:[1]))

private
  Coincidence_2_4 : [4]TripPort -> Bit
  Coincidence_2_4 x =
    (a&&b) || ((a||b) && (c||d)) || (c&&d)
    where
      a = (x @ (0:[2])) != 0
      b = (x @ (1:[2])) != 0
      c = (x @ (2:[2])) != 0
      d = (x @ (3:[2])) != 0

  count : {n} (fin n, n >= 1) => [n] -> [width n]
  count bs = sum [ if b then 1 else 0 | b <- bs ]

  /** @requirements
        ACTUATION_LOGIC_VOTE_TEMPERATURE
  */
  property actuation_logic_vote_temperature (inp: Input) =
    (count [i != 0 | i <- (inp @ T)] >= 2) == TemperatureLogic (inp @ T)

  /** @requirements
        ACTUATION_LOGIC_VOTE_PRESSURE
  */
  property actuation_logic_vote_pressure (inp: Input) =
    (count [i != 0 | i <- (inp @ P)] >= 2) == PressureLogic (inp @ P)

  /** @requirements
        ACTUATION_LOGIC_VOTE_SATURATION
  */
  property actuation_logic_vote_saturation (inp: Input) =
    (count [i != 0 | i <- (inp @ S)] >= 2) == SaturationLogic (inp @ S)

  /** @requirements
        ACTUATION_LOGIC_DEVICE_0
        ACTUATION_LOGIC_VOTE_DEVICE_0
        ACTUATION_LOGIC_VOTE_MANUAL_DEVICE_0
  */
  property actuation_logic_device_0 (inp: Input) (act: ActuationUnit) =
       act.output @ 0
    \/ TempPressureTripOut [TemperatureLogic (inp @ T), PressureLogic (inp @ P)]
    == /* ---------------- */
    act'.output @ 0
    where act' = TripInput inp act

  /** @requirements
        ACTUATION_LOGIC_DEVICE_1
        ACTUATION_LOGIC_VOTE_DEVICE_1
        ACTUATION_LOGIC_VOTE_MANUAL_DEVICE_1
  */
  property actuation_logic_device_1 (inp: Input) (act: ActuationUnit) =
       act.output @ 1
    \/ SaturationLogic (inp @ S)
    == /* ---------------- */
    act'.output @ 1
    where act' = TripInput inp act
