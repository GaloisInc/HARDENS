[ { "header": "Split", "tactic": "Wp.split", "params": {},
    "select": { "select": "clause-step", "at": 23, "kind": "have",
                "target": "let x_0 = Mint_0[(shift_uint8 x4847_0 2)] in\nlet x_1 = Mint_0[(shift_uint8 x4847_0 3)] in\nlet x_2 = (land 255 (if (x_0=0) then 0 else 1) (if (x_1=0) then 0 else 1)) in\nif (x_0=0) then (x_2=0) else (if (x_1=0) then (x_2=0) else (x_2=1))",
                "pattern": "?==?[]0land0===$Mintshift_uint8255" },
    "children": { "Then": [ { "header": "Split", "tactic": "Wp.split",
                              "params": {},
                              "select": { "select": "clause-step", "at": 10,
                                          "kind": "have",
                                          "target": "let x_0 = Mint_0[(shift_uint8 x4847_0 0)] in\nlet x_1 = Mint_0[(shift_uint8 x4847_0 1)] in\nlet x_2 = (land 255 (if (x_0=0) then 0 else 1) (if (x_1=0) then 0 else 1)) in\nif (x_0=0) then (x_2=0) else (if (x_1=0) then (x_2=0) else (x_2=1))",
                                          "pattern": "?==?[]0land0===$Mintshift_uint8255" },
                              "children": { "Then": [ { "header": "Split",
                                                        "tactic": "Wp.split",
                                                        "params": {},
                                                        "select": { "select": "clause-goal",
                                                                    "target": "let x_0 = Mint_0[(shift_uint8 x4847_0 1)] in\nlet x_1 = Mint_0[(shift_uint8 x4847_0 3)] in\n((x_0!=0) /\\ (x_1!=0))=\n((land 255 (if (x_0=0) then 0 else 1) (if (x_1=0) then 0 else 1))!=0)",
                                                                    "pattern": "=&~~~land0[]0[]0255??$Mintshift_uint8" },
                                                        "children": { "Necessity": 
                                                                    [ { "prover": "qed",
                                                                    "verdict": "valid" } ],
                                                                    "Sufficiency": 
                                                                    [ { "prover": "Alt-Ergo:2.4.1",
                                                                    "verdict": "valid",
                                                                    "time": 0.0593,
                                                                    "steps": 1128 } ] } } ],
                                            "Else": [ { "prover": "qed",
                                                        "verdict": "valid" } ] } } ],
                  "Else": [ { "prover": "Alt-Ergo:2.4.1", "verdict": "valid",
                              "time": 0.0231, "steps": 43 } ] } } ]
