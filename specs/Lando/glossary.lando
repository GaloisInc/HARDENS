// Copyright 2021, 2022, 2023 Galois, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

subsystem Proposal Glossary (Glossary)

component Behavioral Interface Specification Language (BISL)
A formal, state-based specification language that focuses on the
specification of the interfaces of discrete modules in a system, and
often times includes model-based specification constructs to improve
usability and expressivity.

component BlueCheck
A property-based testing framework for components written in Bluespec
SystemVerilog that uses some of the design patterns and ideas from the
QuickCheck.

component Coq
Coq is an interactive theorem prover first released in 1989. It allows
for expressing mathematical assertions, mechanically checks proofs of
these assertions, helps find formal proofs, and extracts a certified
program from the constructive proof of its formal specification. Coq
works within the theory of the calculus of inductive constructions, a
derivative of the calculus of constructions. Coq is not an automated
theorem prover but includes automatic theorem proving tactics
(procedures) and various decision procedures.

component Cryptol
Cryptol is a domain specific programming language for cryptography
developed by Galois.  The language was originally developed for use by
the United States National Security Agency. The language is also used
by private firms that provide information technology systems, such as
Amazon and defense contractors in the United States.  The programming
language is used for all aspects of developing and using cryptography,
such as the design and implementation of new ciphers and the
verification of existing cryptographic algorithms.

component DevSecOps
The use of tools in a user's local and remote design, development,
validation, verification, maintenance, and evolution environments that
facilitate the automatic and continuous evaluation by static and
dynamic means of a system/subsystem/component's behavioral (e.g.,
safety and correctness) and non-behavioral (e.g., well-formedness and
security) properties.

component Digital Instrumentation and Control Systems (DIANDC)
One of several types of control systems and associated instrumentation
used for industrial process control.  Such systems can range in size
from a few modular panel-mounted controllers to large interconnected
and interactive distributed control systems with many thousands of
field connections. Systems receive data from remote sensors measuring
process variables (PVs), compare the collected data with desired
setpoints (SPs), and derive command functions which are used to
control a process through the final control elements (FCEs), such as
control valves.

component Formal Requirements Elicitation Tool (FRET)
The NASA Formal Requirements Elicitation Tool is used to make writing,
understanding, and debugging formal requirements natural and
intuitive.

component PVS
A specification language integrated with support tools and an
automated theorem prover, developed at the Computer Science Laboratory
of SRI International.  PVS is based on a kernel consisting of an
extension of Church's theory of types with dependent types, and is
fundamentally a classical typed higher-order logic.

component RISC-V
RISC-V (pronounced ``risk-five'') is an open standard instruction set
architecture (ISA) based on established reduced instruction set
computer (RISC) principles. Unlike most other ISA designs, the RISC-V
ISA is provided under open source licenses that do not require fees to
use. A number of companies are offering or have announced RISC-V
hardware, open source operating systems with RISC-V support are
available and the instruction set is supported in several popular
software toolchains.

component Requirements State Modeling Language (RSML)
A formal specification language that uses hierarchical finite state
machines to specify system requirements.

component SAT
The Boolean satisfiability problem (sometimes called propositional
satisfiability problem and abbreviated SAT) is the problem of
determining if there exists an interpretation that satisfies a given
Boolean formula.

component SAWscript
The proof script language is used to specify the assumptions and proof
goals of formal verifications to the SAW tool.

component soft-core
A CPU or SoC that is implemented in an HDL and synthesized to a
bitstream and loaded onto an FPGA.

component SPARK
A formally defined computer programming language based on the Ada
programming language, intended for the development of high integrity
software used in systems where predictable and highly reliable
operation is essential. It facilitates the development of applications
that demand safety, security, or business integrity.

component SpeAR
An integrated development environment for formally specifying and
rigorously analyzing requirements.

component Verifier for Concurrent C (VCC)
VCC is a program verification tool that proves correctness of
annotated concurrent C programs or finds problems in them. VCC extends
C with design by contract features, like pre- and postcondition as
well as type invariants. Annotated programs are translated to logical
formulas using the Boogie tool, which passes them to an automated SMT
solver Z3 to check their validity.

component Verified Software Toolchain (VST)
A software toolchain that includes static analyzers to check
assertions about a C program; optimizing compilers to translate a C
program to machine language; and operating systems and libraries to
supply context for the C program. The Verified Software Toolchain
project assures with machine-checked proofs that the assertions
claimed at the top of the toolchain really hold in the
machine-language program, running in the operating-system context.

component Refinement
The process of elaborating or detailing a design or idea, often used
in software and systems engineering to develop a more detailed design
or implementation from an abstract concept.  There are a variety of
formal theories of refinement that we use in RDE, including those from
Morgan, Morris, Back, and Hoare and He.

component Property
A characteristic or attribute of a system, used in formal
specifications to describe essential qualities or features that the
system should exhibit.

component Safety Property
inherit Property
A safety property ensures that a system does not enter a hazardous
state or perform unsafe actions, often critical in high-assurance or
safety-critical systems.

component Correctness Property
inherit Property
A correctness property asserts that a system's behavior matches its
specifications, ensuring that it functions correctly as per its
defined requirements.

component Security Property
inherit Property
A security property defines criteria for protecting a system from
unauthorized access, use, disclosure, disruption, modification, or
destruction.

component Model
A simplified representation of a system or process, used in various
contexts like software engineering, system design, or scientific
research, to analyze, predict, or understand the system's behavior.

component Semi-Formal Model
inherit Model
A semi-formal model uses structured and partially formalized languages
or diagrams to represent a system, combining formal elements with
informal descriptions.

component Formal Model
inherit Model
A formal model uses mathematical and logical foundations to represent
a system rigorously, enabling precise analysis and verification of
system properties.

component Consistent
inherit Property
Consistency refers to the absence of contradictions in a set of data,
specifications, or models. It ensures that different parts of a system
or document do not conflict with each other.

component Complete
inherit Property
Completeness in the context of systems or specifications refers to the
inclusion of all necessary and relevant parts or information, leaving
no significant aspect unaddressed.

component Consistent Model
inherit Model Consistent
A consistent model is one that is free from contradictions or
conflicts within its structure or elements, ensuring logical coherence
in its representation of the system.

component Complete Model
inherit Model Complete
A complete model comprehensively represents all aspects of the system
it describes, ensuring that no crucial components or behaviors are
omitted.

component Requirement
A requirement is a formal expression of need or a condition that a
system or component must satisfy, often used in the context of system
design and engineering.

component Scenario
A scenario is a narrative or sequence of events, often used to
describe a possible situation in system operations or to illustrate
how a system might be used.  Scenarios can also be used to express
situations that should not take place, are dangerous, or are insecure.

component Product
A product refers to a tangible or intangible result of a process, such
as a software application, hardware device, or service, created to
fulfill a specific need or requirement.

component Product Line
A product line is a group of related products developed by a company,
sharing common features, technology, and market segment, often
allowing for variations to meet different customer needs.  Product
lines are formally specified using feature models.

component Configure
To configure means to set up or arrange the elements of a system or
component, often involving choices about options, parameters, or
settings to meet specific requirements.  Feature models are configured
to specify products.

component DOORS
DOORS (Dynamic Object-Oriented Requirements System) is a software
application for managing complex requirements in large systems,
facilitating organization, tracking, and analysis of requirements.

component Clafer
Clafer is a lightweight modeling language designed for specification
and analysis, supporting feature modeling, meta-modeling, and
multi-objective optimization.

component Lobot
Lobot is a feature modeling sublanguage used within the Lando system
specification language, enabling the specification of system features
and their relationships.

component Lando
Lando is a system specification language resembling natural language,
used for specifying various aspects of a system, including its domain
model, architecture, requirements, events, and scenarios.

component Denotational
Denotational semantics is a formal method for expressing the meaning
of programming languages, using mathematical objects to represent the
meaning of expressions in the language.

component Operational
Operational semantics is a way to define the behavior of a programming
language through the use of abstract machines or mathematical
operations, describing how program operations execute.

component Semantics
Semantics in the context of programming languages and formal
specifications refers to the meaning or interpretation of syntactic
structures, such as code or formulas.

component Risk
Risk refers to the potential for loss or harm, often assessed in terms
of likelihood and impact, and is a key consideration in systems
engineering and project management.

component Power
Power, in an engineering context, typically refers to the rate at
which energy is used, produced, or transferred, and is a critical
factor in the design and operation of electronic systems.

component Resource
A resource is an asset or input used to achieve objectives in a
process or project, such as materials, people, time, information, or
technology.

component Reliability
Reliability refers to the probability of a system or component
functioning correctly over a specified period under defined
conditions, and is a key quality attribute in engineering.

component Rigorous
A specification or methodology is rigorous if it is precise,
well-defined, and based on formal principles, ensuring a high level of
accuracy and reliability.

component Collaborative Development Environment (CDE)
A Collaborative Development Environment (CDE) is a software platform
that enables multiple individuals or teams to work together on
software development projects, often providing tools for
communication, code sharing, and project management.

component Continuous Integration (CI)
Continuous Integration (CI) is a software development practice where
developers regularly merge their code changes into a central
repository, followed by automated builds and tests.

component Continuous Verification (CV)
Continuous Verification (CV) involves the ongoing application of
processes, tools, and practices to ensure that a system meets its
requirements, often integrated into the software development
lifecycle.

component Analyzer
An analyzer is a tool or method used to examine, inspect, or evaluate
something, often used in the context of software to analyze code for
quality, performance, or security.

component Static Analyzer
inherit Analyzer
A Static Analyzer is a tool that evaluates software code without
executing it, checking for issues such as syntax errors, code quality,
and potential vulnerabilities.

component Dynamic Analyzer
inherit Analyzer
A Dynamic Analyzer is a tool that assesses software code during its
execution, monitoring for runtime errors, performance issues, and
other dynamic behaviors.

component Finite State Machine (FSM)
A Finite State Machine (FSM) is a computational model used to
represent and control execution flow, defined by a set of states,
transitions between those states, and actions.

component Deterministic
Deterministic refers to a system or process that behaves predictably
and consistently, producing the same output for a given input every
time, without random variations.

component Non-deterministic
Non-deterministic refers to a system or process where the outcome is
not predictable with certainty, potentially yielding different results
for the same input in different instances.

component Deterministic Finite State Machine (DFSM)
inherit FSM Deterministic
A Deterministic Finite State Machine (DFSM) is an FSM where each
state's transition to the next state is uniquely determined by the
input, leading to predictable behavior.

component Non-deterministic Finite State Machine (NFSM)
inherit FSM Non-deterministic
A Non-deterministic Finite State Machine (NFSM) is a type of FSM where
for some states, the next state may be one of several possible
states. NFSMs are used in scenarios where a system's next state is not
strictly determined by its current state and inputs.

component Abstract State Machine (ASM)
inherit FSM
An Abstract State Machine (ASM) is a computational model used in
computer science for designing and analyzing algorithms and system
specifications. ASMs capture the operational semantics of a system at
a high level of abstraction.

component Design
Design in the context of engineering refers to the process of creating
a plan or convention for constructing an object, system, or measurable
human interaction. It often involves research, thought, modeling,
interactive adjustment, and re-design.

component Architecture
Architecture in system development refers to the conceptual structure
and logical organization of a computer, system, or other complex
entity. It defines the system components or modules and the
relationships between them.

component Specification
Specification in software and systems engineering is the process of
defining the desired behavior and functionalities of a system or
component. It acts as a guideline or blueprint for development and
assessment.

component Architecture Specification
inherit Specification
An Architecture Specification is a detailed document that describes
the architecture of a system. It includes information about the
system's components, their interactions, and guidelines for how the
system should be built and operated.

component Solver
A Solver is a computational tool or program that solves a mathematical
problem or equation. In computer science, solvers are used to find
solutions to complex algorithms, logic problems, and optimization
challenges.

component Formal Method (FM)
Formal Methods (FMs) are a particular kind of mathematically-based
technique for the specification, development, and verification of
software and hardware systems. They are used to ensure the correctness
and reliability of systems, particularly in critical applications.

component Logical Framework (LF)
A Logical Framework (LF) is a formal system with a strong foundation
in logic, used for specifying and reasoning about various types of
mathematical objects. It provides a structure in which various logical
theories can be encoded.

component Programming Language (PL)
A Programming Language (PL) is a formal language comprising a set of
instructions that produce various kinds of output. PLs are used in
computer programming to implement algorithms and manipulate data.

component Specification Language
A Specification Language is a formal language used to describe, in a
systematic and precise manner, the aspects of a system or
component. It serves as a tool for communication, analysis, and
implementation of systems.

component Protocol
A Protocol in computing is a set of rules or procedures for
transmitting data between electronic devices, such as computers. It
defines the syntax, semantics, and synchronization of communication.

component System Specification
inherit Specification
A System Specification is a document that captures the requirements
and functionalities of a system. It details how a system is supposed
to operate and the constraints under which it must operate.

component Hand-written
Hand-written in the context of software and systems refers to
components, code, or documentation that is manually written by
individuals, as opposed to being automatically generated by a tool or
software.

component Machine-generated
Machine-generated refers to code, documentation, or other outputs that
are automatically produced by a software tool, compiler, or system,
without direct human input in the creation process.

component Source-level Specification Language
inherit Specification Language
A Source-level Specification Language is a type of specification
language used to describe the behavior, structure, and other
attributes of a system at the source code level.

component Model-based Specification Language
inherit Specification Language
A Model-based Specification Language is used for specifying and
designing systems based on models. It focuses on defining system
characteristics through high-level models, often in a graphical
format.

component System
A System in engineering and computer science refers to a set of
interacting or interdependent components forming an integrated
whole. It's often complex, with various elements working together to
achieve specific goals.

component Distributed System
inherit System
A Distributed System is a system whose components are located on
different networked computers, which communicate and coordinate their
actions by passing messages to each other.

component Concurrent System
inherit System
A Concurrent System refers to a system where several computations are
executing simultaneously, and potentially interacting with each
other. The computations may be executing on multiple computational
units or interleaved on a single unit.

component Cryptographic Protocol
inherit Protocol
A Cryptographic Protocol is a protocol that uses cryptographic
techniques to securely communicate and transfer data over a
network. It ensures t he confidentiality, integrity, authenticity, and
non-repudiation of data.

component Cryptographic Algorithm
A Cryptographic Algorithm is a mathematical function used in
encryption and decryption processes. It's an essential component of
cryptographic techniques, ensuring the security of data transmission
and storage.

component I/O (IO)
Input/Output (IO) refers to the communication between an information
processing system (such as a computer) and the outside world, possibly
a human or another information processing system.

component General Purpose I/O (GPIO)
inherit IO
General Purpose Input/Output (GPIO) is a pin on a chip whose behavior
can be controlled by the user at runtime. GPIOs are used for a wide
range of purposes, from reading a simple switch to controlling complex
systems.

component Sensor
A Sensor is a device that detects and responds to some type of input
from the physical environment. The specific input could be light,
heat, motion, moisture, pressure, or any one of a great number of
other environmental phenomena.

component Actuator
An Actuator is a type of motor that is responsible for moving or
controlling a mechanism or system. It is operated by a source of
energy, typically electric current, hydraulic fluid pressure, or
pneumatic pressure.

component Solenoid
inherit Actuator
A Solenoid is a type of electromagnet, a coil of wire that is actuated
when an electric current passes through it. Solenoids are often used
as actuators in automation systems.

component Compiler
A Compiler is a program that translates source code written in a
programming language into another computer language, typically machine
code or an intermediate language.

component Synthesizer
In the domain of hardware engineering, a Synthesizer is a tool or
software system used for converting high-level descriptions of
hardware, such as those written in Hardware Description Languages
(HDLs), into a lower-level, detailed hardware representation or direct
hardware instantiation. This process is commonly used in the
development of digital circuits and systems, where the synthesizer
translates abstract hardware models into physical layout or FPGA
(Field-Programmable Gate Array) configurations, facilitating the
creation and testing of hardware designs.

component Universal Serial Bus (USB)
Universal Serial Bus (USB) is an industry standard for cables,
connectors, and protocols for connection, communication, and power
supply between computers, peripheral devices, and other electronics.

component LED
A Light Emitting Diode (LED) is a semiconductor light source that
emits light when current flows through it. LEDs are used as indicator
lamps in many devices and are increasingly used for other lighting.

component Cable
A Cable in electronics and telecommunications is an assembly of one or
more wires running side by side or bundled, used to carry electric
current.

component Program
A Program in computing is a set of instructions that tells a computer
how to perform a specific task. Programs are a fundamental part of
computer systems and software.

component Bitstream
A Bitstream is a sequence of bits used to provide a configuration or
data to programmable devices, such as a field-programmable gate array
(FPGA) or other programmable hardware.

component Field-Programmable Gate Array (FPGA)
A Field-Programmable Gate Array (FPGA) is an integrated circuit
designed to be configured by the customer or designer after
manufacturing, allowing a flexible approach to hardware design and
deployment.

component ECP-5
inherit FPGA
The ECP-5 is a series of field-programmable gate array (FPGA) chips
from Lattice Semiconductor, known for their efficiency, performance,
and versatility in various electronic applications.

component Printed Circuit Board (PCB)
A Printed Circuit Board (PCB) mechanically supports and electrically
connects electronic components using conductive tracks, pads, and
other features etched from copper sheets laminated onto a
non-conductive substrate.

component Connector
A Connector in electronics is an electro-mechanical device used to
join electrical terminations and create an electrical
circuit. Connectors are used to connect and disconnect electronic
components.

component USB Connector
A USB Connector is a type of connector used for Universal Serial Bus
(USB) interfaces. It is used for data transfer, power supply, and
communication between devices and computers.

component USB Mini Connector (USB-Mini)
inherit USB Connector
A USB Mini Connector is a smaller version of the standard USB
connector, designed for smaller devices such as digital cameras and
smartphones. It is part of the USB family of connectors.

component High-Assurance
High-Assurance in systems and software engineering refers to a high
level of confidence in the correctness, safety, and reliability of a
system, often achieved through rigorous testing, formal verification,
and compliance with standards.

component C
C is a high-level and general-purpose programming language that is
widely used for system and application software, device drivers,
embedded software, and high-performance server and client
applications.

component PMOD
PMOD refers to a type of standardized interface used in electronic
systems, particularly for interfacing peripheral modules to FPGA or
microcontroller development boards.

component JTAG
Joint Test Action Group (JTAG) is a standard for testing and verifying
electronic circuit boards and systems. It is commonly used for
debugging and programming FPGAs and microprocessors.

component Driver
In computing, a Driver is a type of software that controls a
device. Every device, whether it be a printer, disk drive, or
keyboard, must have a driver program to function with a computer
system.

component Voting
Voting in the context of computing and systems refers to a method for
ensuring reliability and fault tolerance by having multiple system
components (like processors or sensors) perform the same operation and
then voting on the result to decide the correct output.

component USB Cable
inherit USB Cable
A USB Cable is a cable used to connect devices to a computer or power
source using Universal Serial Bus (USB) standards. It is used for data
transfer and charging devices.

component Output LED
inherit LED
An Output LED is a light-emitting diode used as an output device in
electronic systems. It provides visual feedback, often indicating the
status of a process or system.
