subsystem Proposal Glossary (Glossary)

component Behavioral Interface Specification Language (BISL)
A formal, state-based specification language that focuses on the
specification of the interfaces of discrete modules in a system, and
often times includes model-based specification constructs to improve
usability and expressivity.

component BlueCheck
A property-based testing framework for components written in Bluespec
SystemVerilog that uses some of the design patterns and ideas from the
QuickCheck.

component Coq
Coq is an interactive theorem prover first released in 1989. It allows
for expressing mathematical assertions, mechanically checks proofs of
these assertions, helps find formal proofs, and extracts a certified
program from the constructive proof of its formal specification. Coq
works within the theory of the calculus of inductive constructions, a
derivative of the calculus of constructions. Coq is not an automated
theorem prover but includes automatic theorem proving tactics
(procedures) and various decision procedures

component Cryptol
Cryptol is a domain specific programming language for cryptography
developed by Galois.  The language was originally developed for use by
the United States National Security Agency. The language is also used
by private firms that provide information technology systems, such as
Amazon and defense contractors in the United States.  The programming
language is used for all aspects of developing and using cryptography,
such as the design and implementation of new ciphers and the
verification of existing cryptographic algorithms.

component DevSecOps
The use of tools in a user's local and remote design, development,
validation, verification, maintenance, and evolution environments that
facilitate the automatic and continuous evaluation by static and
dynamic means of a system/subsystem/component's behavioral (e.g.,
safety and correctness) and non-behavioral (e.g., well-formedness and
security) properties.

component Digital Instrumentation and Control Systems (DIANDC)
One of several types of control systems and associated instrumentation
used for industrial process control.  Such systems can range in size
from a few modular panel-mounted controllers to large interconnected
and interactive distributed control systems with many thousands of
field connections. Systems receive data from remote sensors measuring
process variables (PVs), compare the collected data with desired
setpoints (SPs), and derive command functions which are used to
control a process through the final control elements (FCEs), such as
control valves.

component Formal Requirements Elicitation Tool (FRET)
The NASA Formal Requirements Elicitation Tool is used to make writing,
understanding, and debugging formal requirements natural and
intuitive.

component PVS
A specification language integrated with support tools and an
automated theorem prover, developed at the Computer Science Laboratory
of SRI International.  PVS is based on a kernel consisting of an
extension of Church's theory of types with dependent types, and is
fundamentally a classical typed higher-order logic.

component RISC-V
RISC-V (pronounced ``risk-five'') is an open standard instruction set
architecture (ISA) based on established reduced instruction set
computer (RISC) principles. Unlike most other ISA designs, the RISC-V
ISA is provided under open source licenses that do not require fees to
use. A number of companies are offering or have announced RISC-V
hardware, open source operating systems with RISC-V support are
available and the instruction set is supported in several popular
software toolchains.

component Requirements State Modeling Language (RSML)
A formal specification language that uses hierarchical finite state
machines to specify system requirements.

component SAT
The Boolean satisfiability problem (sometimes called propositional
satisfiability problem and abbreviated SAT) is the problem of
determining if there exists an interpretation that satisfies a given
Boolean formula.

component SAWscript
The proof script language is used to specify the assumptions and proof
goals of formal verifications to the SAW tool.

component soft-core
A CPU or SoC that is implemented in an HDL and synthesized to a
bitstream and loaded onto an FPGA.

component SPARK
A formally defined computer programming language based on the Ada
programming language, intended for the development of high integrity
software used in systems where predictable and highly reliable
operation is essential. It facilitates the development of applications
that demand safety, security, or business integrity.

component SpeAR
An integrated development environment for formally specifying and
rigorously analyzing requirements.

component Verifier for Concurrent C (VCC)
VCC is a program verification tool that proves correctness of
annotated concurrent C programs or finds problems in them. VCC extends
C with design by contract features, like pre- and postcondition as
well as type invariants. Annotated programs are translated to logical
formulas using the Boogie tool, which passes them to an automated SMT
solver Z3 to check their validity.

component Verified Software Toolchain (VST)
A software toolchain that includes static analyzers to check
assertions about a C program; optimizing compilers to translate a C
program to machine language; and operating systems and libraries to
supply context for the C program. The Verified Software Toolchain
project assures with machine-checked proofs that the assertions
claimed at the top of the toolchain really hold in the
machine-language program, running in the operating-system context.

component Refinement

component Property

component Safety Property

component Correctness Property

component Security Property

component Model

component Semi-Formal Model

component Formal Model

component Consistent Model

component Complete Model

component Requirement

component Scenario

component Product

component Product Line

component Configure

component DOORS

component Clafer

component Lobot

component Lando

component Denotational

component Operational

component Risk

component Power

component Resource

component Reliability

component Rigorous
A specification that has a precise, unambiguous, formal semantics
grounded in real world formal foundations and systems engineering
artifacts, such as source code and hardware designs.

component Collaborative Development Environment (CDE)

component Continuous Integration (CI)

component Continuous Verification (CV)

component Static Analyzer

component Dynamic Analyzer

component Finite State Machine (FSM)

component Deterministic Finite State Machine (FSM)

component Non-deterministic Finite State Machine (NFSM)

component Abstract State Machine (ASM)

component Design

component Architecture

component Architecture Specification

component Solver

component Formal Method (FM)

component Logical Framework (LF)

component Programming Language (PL)

component Protocol

component Specification

component System Specification

component Hand-written

component Machine-generated

component Source-level Specification Language

component Model-based Specification Language

component Distributed System

component Concurrent System

component Cryptographic Protocol

component Cryptographic Algorithm

component General Purpose I/O (GPIO)

component Sensor

component Actuator

component Solenoid
relation Solenoid inherit Actuator

component Compiler

component Synthesizer

component Universal Serial Bus (USB)

component Cable

component Program

component Bitstream

component FPGA

component ECP-5
relation ECP-5 inherit FPGA

component Printed Component Board (PCB)

component Connector

component USB Mini Connector (USB Mini)
relation USB Mini Connector inherit Connector, USB

component High-Assurance

component C

component PMOD

component JTAG

