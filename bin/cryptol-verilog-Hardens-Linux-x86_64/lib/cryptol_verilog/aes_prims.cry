module cryptol_verilog::aes_prims where

// import SuiteB as SuiteB

type GF28        = [8]
type Column      = [4]GF28
type State       = [4]Column
type Coeff       = [4]

EncRound : [4][32] -> [4][32]
EncRound s = out
  where
    s_box = SubBytes s0
    s_row = ShiftRows s_box
    m_col = MixColumns s_row
    // Massage into shape:
    s0    = [ split col | col <- s ]
    out   = [ join c | c <- m_col ]

EncFinalRound : [4][32] -> [4][32]
EncFinalRound s = out
  where
    s_box = SubBytes s0
    s_row = ShiftRows s_box
    // Massage into shape:
    s0    = [ split col | col <- s ]
    out   = [ join c | c <- s_row ]

DecRound      : [4][32] -> [4][32]
DecRound s = out
  where
    s0  = [ split col | col <- s ]
    s1  = InvSubBytes s0
    s2  = InvShiftRows s1
    out = InvMixColumns [ join bs | bs <- s2 ]

DecFinalRound : [4][32] -> [4][32]
DecFinalRound s = out
  where
    s0 = [ split col | col <- s ]
    s1 = InvSubBytes s0
    s2 = InvShiftRows s1
    out = [ join bs | bs <- s2 ]

SubBytes : State -> State
SubBytes state = out
  where out = [ [ Sbox b | b <- col ] | col <- state ]

InvSubBytes : State -> State
InvSubBytes state = out
  where out = [ [ InvSbox b | b <- col ] | col <- state ]

ShiftRows : State -> State
ShiftRows state = out
  where
    out @ c @ r = state @ c1 @ r
      where c1 = c + r : [2]

InvShiftRows : State -> State
InvShiftRows state = out
  where
    out @ c @ r = state @ c1 @ r
      where c1 = c - r : [2]

MixColumns : State -> State
MixColumns state = out
  where
    m = [[2,3,1,1],[1,2,3,1],[1,1,2,3],[3,1,1,2]]
    out = [ [ dot row col | row <- m ] | col <- state ]

InvMixColumns : [4][32] -> [4][32]
InvMixColumns state = out
  where
    m = [[14,11,13,9],[9,14,11,13],[13,9,14,11],[11,13,9,14]]
    out = [ join [ dot row (split col) | row <- m ] | col <- state ]

xtime : GF28 -> GF28
xtime x = out
  where out = (tail x # 0b0) ^ (if head x then 0x1b else 0x00)

dot : [4]Coeff -> Column -> GF28
dot row col = out
  where
    m : [4]GF28
    m = [ mult r c | r <- row | c <- col ]

    m0, m1, m2, m3 : GF28
    [m0, m1, m2, m3] = m

    out : GF28
    out = m0 ^ m1 ^ m2 ^ m3

/** Galois field multiplication by a 4-bit value. */
mult : Coeff -> GF28 -> GF28
mult a b = out
  where
    a3, a2, a1, a0 : Bit
    [a3, a2, a1, a0] = a

    b0, b1, b2, b3 : GF28
    b0 = b
    b1 = xtime b0
    b2 = xtime b1
    b3 = xtime b2
 
    out : GF28
    out = (if a0 then b0 else 0x00) ^
          (if a1 then b1 else 0x00) ^
          (if a2 then b2 else 0x00) ^
          (if a3 then b3 else 0x00)

Sbox : [8] -> [8]
Sbox b = out
  where
    out = box @ b
    box =
      [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
      ]

InvSbox : [8] -> [8]
InvSbox b = out
  where
    out = box @ b
    box =
      [
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
      ]

KeyExpand : {k} (fin k, k >= 4, 8 >= k) => [k][32] -> [4*(k+7)][32]
KeyExpand key = keys
  where
    keys : [4*(k+7)][32]
    keys @ (i:[8]) = 
      if (i < `k) then
        key @ i
      else if ((i % `k) == 0) then
        (keys @ (i - `k)) ^ subWordRcon (join (RotWord (split (keys @ (i-1))))) (Rcon @ (i / `k))
      else if (((i % `k) == 4) && (`k > 0x06)) then
        (keys @ (i - `k)) ^ subWordRcon (keys @ (i-1)) 0
      else
        (keys @ (i - `k)) ^ (keys @ (i - 1))

    subWordRcon : [32] -> GF28 -> [32]
    subWordRcon w rc = join [a ^ rc, b, c, d]
      where
        [a,b,c,d] = [ Sbox byte | byte <- split w ]

    Rcon : [255][8]
    Rcon =
      [
        0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
        0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
        0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a,
        0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
        0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25,
        0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
        0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
        0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
        0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6,
        0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
        0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
        0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
        0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01,
        0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
        0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e,
        0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
        0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
        0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
        0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8,
        0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
        0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
        0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
        0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91,
        0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
        0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d,
        0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
        0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
        0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
        0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa,
        0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
        0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
        0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb
      ]

/** SubWord (FIPS-197 section 5.2). */
SubWord : [4]GF28 -> [4]GF28
SubWord bs = out
  where out = [ Sbox b | b <- bs ]

/** RotWord (FIPS-197 section 5.2). */
RotWord : [4]GF28 -> [4]GF28
RotWord in = out
  where
    [a0, a1, a2, a3] = in
    out = [a1, a2, a3, a0]

// private
//   OurAESEncrypt : {k} (fin k) => SuiteB::AESEncryptKeySchedule k -> [128] -> [128]
//   OurAESEncrypt schedule plaintext = rnf (join final)
//     where
//     final = (EncFinalRound (rds!0)) ^ schedule.aesEncFinalKey
  
//     rds = [ schedule.aesEncInitialKey ^ split plaintext ] #
//           [ EncRound r ^ rdk
//           | rdk <- schedule.aesEncRoundKeys
//           | r   <- rds
//           ]

//   OurAESDecrypt : {k} (fin k) => SuiteB::AESDecryptKeySchedule k -> [128] -> [128]
//   OurAESDecrypt schedule cyphertext = rnf (join final)
//     where
//     final = (DecFinalRound (rds!0)) ^ schedule.aesDecFinalKey
   
//     rds = [ split cyphertext ^ schedule.aesDecInitialKey ] #
//           [ DecRound r ^ rdk
//           | rdk <- schedule.aesDecRoundKeys
//           | r   <- rds
//           ]

//   OurAes128EncryptSchedule : [128] -> SuiteB::AESEncryptKeySchedule SuiteB::AES128
//   OurAes128EncryptSchedule = OurAesExpandEncryptSchedule

//   OurAesExpandEncryptSchedule : {k} (fin k, k >= 4, 8 >= k) => [k * 32] -> SuiteB::AESEncryptKeySchedule k
//   OurAesExpandEncryptSchedule key = rnf
//          { aesEncInitialKey = ks @  0
//          , aesEncRoundKeys  = ks @@ ([ 1 .. k+5 ] : [k+5][width (k+7)])
//          , aesEncFinalKey   = ks @  `(k+6)
//          }
//       where
//       ks = groupBy`{4} (KeyExpand`{k} (split key))

//   property reference_enc_correct (ks : SuiteB::AESEncryptKeySchedule SuiteB::AES128) (txt : [128]) =
//     OurAESEncrypt ks txt == SuiteB::aesEncryptBlock ks txt

//   property reference_dec_correct (ks : SuiteB::AESDecryptKeySchedule SuiteB::AES128) (txt : [128]) =
//     OurAESDecrypt ks txt == SuiteB::aesDecryptBlock ks txt

//   property reference_sched_correct (txt : [128]) =
//     OurAes128EncryptSchedule txt == SuiteB::aes128EncryptSchedule txt