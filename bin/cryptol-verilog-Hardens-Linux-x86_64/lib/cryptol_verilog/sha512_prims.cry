module cryptol_verilog::sha512_prims where

/**
 * Apply the SHA384 hash algorithm to a sequence of SHA512-size blocks,
 * which are assumed to already be correctly padded.
 */
processSHA2_384 : {n} (fin n) => [n][16][64] -> [6][64]
processSHA2_384 blks = take (states ! 0)
  where
    states : [n + 1][8][64]
    states = [H384] # [processSHA512Block s b | s <- take`{front=n} states | b <- blks]

/**
 * Apply the SHA512 hash algorithm to a sequence of SHA512-size blocks,
 * which are assumed to already be correctly padded.
 */
processSHA2_512 : {n} (fin n) => [n][16][64] -> [8][64]
processSHA2_512 blks = states ! 0
  where
    states : [n + 1][8][64]
    states = [H512] # [processSHA512Block s b | s <- take`{front=n} states | b <- blks]

private
  type State = [8][64]
  
  processSHA512Block : [8][64] -> [16][64] -> [8][64]
  processSHA512Block s blk = C
    where
      H = MessageSchedule blk
      C = compress s H 

  /** Initial Hash Value for SHA-512 (FIPS 180-4 section 5.3.5). The
  first 64 bits of the fractional parts of the square roots of the first
  8 primes (2..19). */
  H512 : State
  H512 =
    [0x6a09e667f3bcc908, 0xbb67ae8584caa73b, 0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1,
     0x510e527fade682d1, 0x9b05688c2b3e6c1f, 0x1f83d9abfb41bd6b, 0x5be0cd19137e2179]
  
  /** Initial Hash Value for SHA-384 (FIPS 180-4 section 5.3.4). The
  first 64 bits of the fractional parts of the square roots of the
  9th-16th primes (23..53). */
  H384 : State
  H384 =
     [0xcbbb9d5dc1059ed8, 0x629a292a367cd507, 0x9159015a3070dd17, 0x152fecd8f70e5939,
      0x67332667ffc00b31, 0x8eb44a8768581511, 0xdb0c2e0d64f98fa7, 0x47b5481dbefa4fa4]

  /** A single round of the compression function (FIPS 180-4 section
  6.4.2, step 3). */
  compress1 : [64] -> [64] -> State -> State
  compress1 k w H = out
    where
      [a,b,c,d,e,f,g,h] = H
      T1 = h + Sigma1 e + Ch e f g + k + w
      T2 = Sigma0 a + Maj a b c
      out = [T1 + T2, a, b, c, d + T1, e, f, g]
   
  /** All k rounds of the compression function (FIPS 180-4 section
  6.4.2). */
  compress : State -> [80][64] -> State
  compress h0 ws = [ x + y | x <- h0 | y <- hf ]
    where
      prev, next : [80]State
      prev # [hf] = [h0] # next
      next = [ compress1 k w h | k <- K | w <- ws | h <- prev ]
      /* SHA-384, SHA-512, SHA-512/224 and SHA-512/256 Constants (FIPS
      180-4 section 4.2.3). These words represent the first 64 bits of the
      fractional parts of the cube roots of the first 80 primes. */
      K : [80][64]
      K =
         [0x428a2f98d728ae22, 0x7137449123ef65cd, 0xb5c0fbcfec4d3b2f, 0xe9b5dba58189dbbc,
          0x3956c25bf348b538, 0x59f111f1b605d019, 0x923f82a4af194f9b, 0xab1c5ed5da6d8118,
          0xd807aa98a3030242, 0x12835b0145706fbe, 0x243185be4ee4b28c, 0x550c7dc3d5ffb4e2,
          0x72be5d74f27b896f, 0x80deb1fe3b1696b1, 0x9bdc06a725c71235, 0xc19bf174cf692694,
          0xe49b69c19ef14ad2, 0xefbe4786384f25e3, 0x0fc19dc68b8cd5b5, 0x240ca1cc77ac9c65,
          0x2de92c6f592b0275, 0x4a7484aa6ea6e483, 0x5cb0a9dcbd41fbd4, 0x76f988da831153b5,
          0x983e5152ee66dfab, 0xa831c66d2db43210, 0xb00327c898fb213f, 0xbf597fc7beef0ee4,
          0xc6e00bf33da88fc2, 0xd5a79147930aa725, 0x06ca6351e003826f, 0x142929670a0e6e70,
          0x27b70a8546d22ffc, 0x2e1b21385c26c926, 0x4d2c6dfc5ac42aed, 0x53380d139d95b3df,
          0x650a73548baf63de, 0x766a0abb3c77b2a8, 0x81c2c92e47edaee6, 0x92722c851482353b,
          0xa2bfe8a14cf10364, 0xa81a664bbc423001, 0xc24b8b70d0f89791, 0xc76c51a30654be30,
          0xd192e819d6ef5218, 0xd69906245565a910, 0xf40e35855771202a, 0x106aa07032bbd1b8,
          0x19a4c116b8d2d0c8, 0x1e376c085141ab53, 0x2748774cdf8eeb99, 0x34b0bcb5e19b48a8,
          0x391c0cb3c5c95a63, 0x4ed8aa4ae3418acb, 0x5b9cca4f7763e373, 0x682e6ff3d6b2b8a3,
          0x748f82ee5defb2fc, 0x78a5636f43172f60, 0x84c87814a1f0ab72, 0x8cc702081a6439ec,
          0x90befffa23631e28, 0xa4506cebde82bde9, 0xbef9a3f7b2c67915, 0xc67178f2e372532b,
          0xca273eceea26619c, 0xd186b8c721c0c207, 0xeada7dd6cde0eb1e, 0xf57d4f7fee6ed178,
          0x06f067aa72176fba, 0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,
          0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc, 0x431d67c49c100d4c,
          0x4cc5d4becb3e42b6, 0x597f299cfc657e2a, 0x5fcb6fab3ad6faec, 0x6c44198c4a475817]

  /** Message schedule W (FIPS 180-4 section 6.4.2, step 1). */
  MessageSchedule : [16][64] -> [80][64]
  MessageSchedule M = W
    where
      W : [80][64]
      W @ (t : [7]) =
        if (t < 16) then
          M @ t
        else
          sigma1 (W @ (t - 2)) + W @ (t - 7) +
          sigma0 (W @ (t - 15)) + W @ (t - 16)

  /** Ch (FIPS 180-4 equation 4.2, section 4.1.2). */
  Ch : [64] -> [64] -> [64] -> [64]
  Ch x y z = (x && y) ^ (~ x && z)
  
  /** Maj (FIPS 180-4 equation 4.3, section 4.1.2). */
  Maj : [64] -> [64] -> [64] -> [64]
  Maj x y z = (x && y) ^ (x && z) ^ (y && z)
  
  /** Function Σ₀ (FIPS 180-4 equation 4.10, section 4.1.3). */
  Sigma0 : [64] -> [64]
  Sigma0 x = (x >>> 28) ^ (x >>> 34) ^ (x >>> 39)
  
  /** Function Σ₁ (FIPS 180-4 equation 4.11, section 4.1.3). */
  Sigma1 : [64] -> [64]
  Sigma1 x = (x >>> 14) ^ (x >>> 18) ^ (x >>> 41)
  
  /** Function σ₀ (FIPS 180-4 equation 4.12, section 4.1.3). */
  sigma0 : [64] -> [64]
  sigma0 x = (x >>> 1) ^ (x >>> 8) ^ (x >> 7)
  
  /** Function σ₁ (FIPS 180-4 equation 4.13, section 4.1.3). */
  sigma1 : [64] -> [64]
  sigma1 x = (x >>> 19) ^ (x >>> 61) ^ (x >> 6)
