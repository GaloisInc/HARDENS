module cryptol_verilog::sha256_prims where

processSHA2_224 : {n} (fin n) => [n][16][32] -> [7][32]
processSHA2_224 blks = take (states ! 0)
  where
    states : [n + 1][8][32]
    states = [H224] # [ processSHA256Block s b | s <- take`{front=n} states | b <- blks ]

processSHA2_256 : {n} (fin n) => [n][16][32] -> [8][32]
processSHA2_256 blks = states ! 0
  where
    states : [n + 1][8][32]
    states = [H256] # [ processSHA256Block s b | s <- take`{front=n} states | b <- blks ]

private
  processSHA256Block : [8][32] -> [16][32] -> [8][32]
  processSHA256Block s blk = C
    where
      H = MessageSchedule blk
      C = compress s H 

  H256 : [8][32]
  H256 =
    [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
     0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]

  H224 : [8][32]
  H224 =
    [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
     0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]

  rol : {i, n, a} (fin i, fin n, n >= i) => [n]a -> [n]a
  rol x = drop`{front=i} x # take`{front=i} x
  
  ror : {i, n, a} (fin i, fin n, n >= i) => [n]a -> [n]a
  ror x = drop`{back=i} x # take`{back=i} x
  
  /** Ch (FIPS 180-4 equation 4.2, section 4.1.2). */
  Ch : [32] -> [32] -> [32] -> [32]
  Ch x y z = out
    where out = (x && y) ^ (~ x && z)
  
  /** Maj (FIPS 180-4 equation 4.3, section 4.1.2). */
  Maj : [32] -> [32] -> [32] -> [32]
  Maj x y z = out
    where out = (x && y) ^ (x && z) ^ (y && z)
  
  /** Function Σ₀ (FIPS 180-4 equation 4.4, section 4.1.2). */
  Sigma0 : [32] -> [32]
  Sigma0 x = out
    where out = (ror`{2} x) ^ (ror`{13} x) ^ (ror`{22} x)
  
  /** Function Σ₁ (FIPS 180-4 equation 4.5, section 4.1.2). */
  Sigma1 : [32] -> [32]
  Sigma1 x = out
    where out = (x >>> 6) ^ (x >>> 11) ^ (x >>> 25)
  
  /** Function σ₀ (FIPS 180-4 equation 4.6, section 4.1.2). */
  sigma0 : [32] -> [32]
  sigma0 x = out
    where out = (x >>> 7) ^ (x >>> 18) ^ (x >> 3)
  
  /** Function σ₁ (FIPS 180-4 equation 4.7, section 4.1.2). */
  sigma1 : [32] -> [32]
  sigma1 x = out
    where out = (x >>> 17) ^ (x >>> 19) ^ (x >> 10)
  
  /** Message schedule W (FIPS 180-4 section 6.2.2, step 1). */
  MessageSchedule : [16][32] -> [64][32]
  MessageSchedule H = W
    where
      W : [64][32]
      W @ (t : [6]) =
        if (t < 16) then
          H @ t
        else
          ( s1 + W @ (t - 7) + s0 + W @ (t - 16)
              where
                s1 = sigma1 (W @ (t - 2))
                s0 = sigma0 (W @ (t - 15))
          )
  
  /** A single round of the compression function (FIPS 180-4 section
  6.2.2, step 2). */
  compress1 : [32] -> [32] -> [8][32] -> [8][32]
  compress1 K W H = out
    where
      [a,b,c,d,e,f,g,h] = H
      S0 = Sigma0 a
      S1 = Sigma1 e
      C = Ch e f g
      M = Maj a b c
      T1 = h + S1 + C + K + W
      T2 = S0 + M
      out = [T1 + T2, a, b, c, d + T1, e, f, g]
  
  /** All k rounds of the compression function (FIPS 180-4 section
  6.2.2, step 2). */
  compress : [8][32] -> [64][32] -> [8][32]
  compress h0 ws = out
    where
      prev : [64][8][32]
      prev # [hf] = [h0] # next
      next = [ compress1 k w h | k <- K | w <- ws | h <- prev ]
      out = [ x + y | x <- h0 | y <- hf ]
  
      /* Sequence K (FIPS 180-4 section 4.2.2). The first 32 bits of the
      fractional parts of the cube roots of the first 64 primes. */
      K : [64][32]
      K =
        [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
         0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
         0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
         0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
         0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
         0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
         0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
         0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
         0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
         0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
         0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
         0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
         0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
         0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
         0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
         0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]